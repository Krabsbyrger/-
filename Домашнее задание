1.Вывести все имена и фамилии студентов, и название хобби, которым занимается этот студент.
SELECT st.name, st.surname, sh.date_finish
FROM student st, student_hobby sh
WHERE st.id = sh.student_id AND sh.date_finish IS NULL
ORDER BY sh.date_start
LIMIT 1
3.Вывести имя, фамилию, номер зачетки и дату рождения для студентов, средний балл которых выше среднего, а сумма риска всех хобби, которыми он занимается в данный момент, больше 0.9.
SELECT DISTINCT st.score, st.name, st.surname, st.date_birth
FROM student st
INNER JOIN
(
SELECT SUM(hb.risk) as r_summ, sh.student_id
FROM hobby hb,
student_hobby sh
WHERE hb.id= sh.hobby_id AND sh.date_finish IS NULL
GROUP BY sh.student_id
)t
ON st.id = t.student_id
AND t.r_summ > 9
WHERE st.score >
(
SELECT AVG(score)::numeric(3,2)
FROM student
)
4.Вывести фамилию, имя, зачетку, дату рождения, название хобби и длительность в месяцах, для всех завершенных хобби Диапазон дат.
SELECT st.name, st.surname, st.n_group, st.date_birth, tt.monthes, tt.name
FROM student st
INNER JOIN
(SELECT (to_char(sh.date_finish, 'MM')::numeric(10,0) + to_char(sh.date_finish, 'YYYY')::numeric(10,0) * 12) - (to_char(sh.date_start, 'MM')::numeric(10,0) + to_char(sh.date_start, 'YYYY')::numeric(10,0) * 12) as monthes, sh.student_id, hb.name
FROM student_hobby sh, hobby hb
WHERE hb.id = sh.id) tt
ON tt.student_id = st.id
5.Вывести фамилию, имя, зачетку, дату рождения студентов, которым исполнилось N полных лет на текущую дату, и которые имеют более 1 действующего хобби.
SELECT st.name, st.surname, st.n_group, st.date_birth
FROM student st
INNER JOIN
(SELECT count(sh.hobby_id), sh.student_id
FROM student_hobby sh, hobby hb
WHERE hb.id = sh.hobby_id
GROUP BY sh.student_id
HAVING count(sh.hobby_id) >1) tt
ON tt.student_id = st.id
WHERE 3 = ((to_char('2024-03-19'::date, 'YYYY')::int * 12 * 30 + to_char('2024-03-19'::date, 'MM')::int * 30 + to_char('2024-03-19'::date, 'DD')::int) - (to_char(st.date_birth, 'YYYY')::int * 12 * 30 + to_char(st.date_birth, 'MM')::int * 30 + to_char(st.date_birth, 'DD')::int))/ 30 / 12
7.Найти название, риск, длительность в месяцах самого продолжительного хобби из действующих, указав номер зачетки студента.
SELECT hb.name, hb.risk, -1 * (to_char(tt.dlit, 'YYYY')::numeric(5,0) * 12 + to_char(tt.dlit, 'MM')::numeric(5,0)) + (to_char(now(), 'YYYY')::numeric(5,0) * 12 + to_char(now(),'MM')::numeric(5,0))
FROM hobby hb
INNER JOIN(
SELECT sh.hobby_id, min(sh.date_start) as dlit, sh.student_id
FROM student_hobby sh
GROUP BY sh.student_id, sh.hobby_id
HAVING sh.student_id = 3
LIMIT 1) tt
ON tt.hobby_id = hb.id
10.Найти номера курсов, на которых более 50% студентов имеют более одного действующего хобби.
SELECT SUBSTRING(st.n_group::varchar,1,1) as course
FROM student st
INNER JOIN(SELECT SUBSTRING(st.n_group::varchar,1,1) as course, count(st.id) as countofstd
FROM student st
INNER JOIN(SELECT sh.student_id, count(sh.hobby_id)
FROM student_hobby sh
WHERE sh.date_finish IS NULL
GROUP BY sh.student_id
HAVING count(sh.student_id) > 1) tt
ON tt.student_id = st.id
GROUP BY SUBSTRING(st.n_group::varchar,1,1)) ttend
ON SUBSTRING(st.n_group::varchar,1,1) = ttend.course
INNER JOIN(SELECT SUBSTRING(st.n_group::varchar,1,1) as course, count(st.id) as countofstd
FROM student st
GROUP BY SUBSTRING(st.n_group::varchar,1,1)) ttnext
ON SUBSTRING(st.n_group::varchar,1,1) = ttnext.course
WHERE ttnext.countofstd / 2 + ttnext.countofstd % 2 <= ttend.countofstd
GROUP BY SUBSTRING(st.n_group::varchar,1,1)
11.Вывести номера групп, в которых не менее 60% студентов имеют балл не ниже 4.
SELECT DISTINCT st.n_group
FROM student st
INNER JOIN(SELECT st.n_group, count(st.id) as countofstd, sum(st.score)
FROM student st
WHERE st.score >= 4
GROUP BY st.n_group) tt
ON st.n_group = tt.n_group
INNER JOIN(SELECT st.n_group, count(st.id) as countofstd
FROM student st
GROUP BY st.n_group) ttt
ON st.n_group = ttt.n_group
WHERE ttt.countofstd / 100 * 60 <= ttt.countofstd
15.Для каждого хобби вывести количество людей, которые им занимаются.
SELECT hb.name, tt.countofhob
FROM hobby hb
INNER JOIN
(SELECT count(sh.student_id) as countofhob, sh.hobby_id
FROM student_hobby sh
WHERE sh.date_finish IS NULL
GROUP BY sh.hobby_id) tt
ON tt.hobby_id = hb.id
16.Вывести ИД самого популярного хобби.
SELECT hb.name
FROM hobby hb
INNER JOIN
(SELECT count(sh.student_id) as countofhob, sh.hobby_id
FROM student_hobby sh
GROUP BY sh.hobby_id) tt
ON tt.hobby_id = hb.id
ORDER BY tt.countofhob DESC
LIMIT 1
18.Вывести ИД 3х хобби с максимальным риском.
SELECT DISTINCT hb.id
FROM hobby hb
WHERE hb.risk = (SELECT max(risk)
FROM hobby)
LIMIT 3
