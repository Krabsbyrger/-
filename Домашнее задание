1.Вывести все имена и фамилии студентов, и название хобби, которым занимается этот студент.
SELECT st.name, st.surname, sh.date_finish
FROM student st, student_hobby sh
WHERE st.id = sh.student_id AND sh.date_finish IS NULL
ORDER BY sh.date_start
LIMIT 1
3.Вывести имя, фамилию, номер зачетки и дату рождения для студентов, средний балл которых выше среднего, а сумма риска всех хобби, которыми он занимается в данный момент, больше 0.9.
SELECT DISTINCT st.score, st.name, st.surname, st.date_birth
FROM student st
INNER JOIN
(
SELECT SUM(hb.risk) as r_summ, sh.student_id
FROM hobby hb,
student_hobby sh
WHERE hb.id= sh.hobby_id AND sh.date_finish IS NULL
GROUP BY sh.student_id
)t
ON st.id = t.student_id
AND t.r_summ > 9
WHERE st.score >
(
SELECT AVG(score)::numeric(3,2)
FROM student
)
4.Вывести фамилию, имя, зачетку, дату рождения, название хобби и длительность в месяцах, для всех завершенных хобби Диапазон дат.
SELECT st.name, st.surname, st.n_group, st.date_birth, tt.monthes, tt.name
FROM student st
INNER JOIN
(SELECT (to_char(sh.date_finish, 'MM')::numeric(10,0) + to_char(sh.date_finish, 'YYYY')::numeric(10,0) * 12) - (to_char(sh.date_start, 'MM')::numeric(10,0) + to_char(sh.date_start, 'YYYY')::numeric(10,0) * 12) as monthes, sh.student_id, hb.name
FROM student_hobby sh, hobby hb
WHERE hb.id = sh.id) tt
ON tt.student_id = st.id
5.Вывести фамилию, имя, зачетку, дату рождения студентов, которым исполнилось N полных лет на текущую дату, и которые имеют более 1 действующего хобби.
SELECT st.name, st.surname, st.n_group, st.date_birth
FROM student st
INNER JOIN
(SELECT count(sh.hobby_id), sh.student_id
FROM student_hobby sh, hobby hb
WHERE hb.id = sh.hobby_id
GROUP BY sh.student_id
HAVING count(sh.hobby_id) >1) tt
ON tt.student_id = st.id
WHERE 3 = ((to_char('2024-03-19'::date, 'YYYY')::int * 12 * 30 + to_char('2024-03-19'::date, 'MM')::int * 30 + to_char('2024-03-19'::date, 'DD')::int) - (to_char(st.date_birth, 'YYYY')::int * 12 * 30 + to_char(st.date_birth, 'MM')::int * 30 + to_char(st.date_birth, 'DD')::int))/ 30 / 12
7.Найти название, риск, длительность в месяцах самого продолжительного хобби из действующих, указав номер зачетки студента.
SELECT hb.name, hb.risk, -1 * (to_char(tt.dlit, 'YYYY')::numeric(5,0) * 12 + to_char(tt.dlit, 'MM')::numeric(5,0)) + (to_char(now(), 'YYYY')::numeric(5,0) * 12 + to_char(now(),'MM')::numeric(5,0))
FROM hobby hb
INNER JOIN(
SELECT sh.hobby_id, min(sh.date_start) as dlit, sh.student_id
FROM student_hobby sh
GROUP BY sh.student_id, sh.hobby_id
HAVING sh.student_id = 3
LIMIT 1) tt
ON tt.hobby_id = hb.id
10.Найти номера курсов, на которых более 50% студентов имеют более одного действующего хобби.
SELECT SUBSTRING(st.n_group::varchar,1,1) as course
FROM student st
INNER JOIN(SELECT SUBSTRING(st.n_group::varchar,1,1) as course, count(st.id) as countofstd
FROM student st
INNER JOIN(SELECT sh.student_id, count(sh.hobby_id)
FROM student_hobby sh
WHERE sh.date_finish IS NULL
GROUP BY sh.student_id
HAVING count(sh.student_id) > 1) tt
ON tt.student_id = st.id
GROUP BY SUBSTRING(st.n_group::varchar,1,1)) ttend
ON SUBSTRING(st.n_group::varchar,1,1) = ttend.course
INNER JOIN(SELECT SUBSTRING(st.n_group::varchar,1,1) as course, count(st.id) as countofstd
FROM student st
GROUP BY SUBSTRING(st.n_group::varchar,1,1)) ttnext
ON SUBSTRING(st.n_group::varchar,1,1) = ttnext.course
WHERE ttnext.countofstd / 2 + ttnext.countofstd % 2 <= ttend.countofstd
GROUP BY SUBSTRING(st.n_group::varchar,1,1)
11.Вывести номера групп, в которых не менее 60% студентов имеют балл не ниже 4.
SELECT DISTINCT st.n_group
FROM student st
INNER JOIN(SELECT st.n_group, count(st.id) as countofstd, sum(st.score)
FROM student st
WHERE st.score >= 4
GROUP BY st.n_group) tt
ON st.n_group = tt.n_group
INNER JOIN(SELECT st.n_group, count(st.id) as countofstd
FROM student st
GROUP BY st.n_group) ttt
ON st.n_group = ttt.n_group
WHERE ttt.countofstd / 100 * 60 <= ttt.countofstd
15.Для каждого хобби вывести количество людей, которые им занимаются.
SELECT hb.name, tt.countofhob
FROM hobby hb
INNER JOIN
(SELECT count(sh.student_id) as countofhob, sh.hobby_id
FROM student_hobby sh
WHERE sh.date_finish IS NULL
GROUP BY sh.hobby_id) tt
ON tt.hobby_id = hb.id
16.Вывести ИД самого популярного хобби.
SELECT hb.name
FROM hobby hb
INNER JOIN
(SELECT count(sh.student_id) as countofhob, sh.hobby_id
FROM student_hobby sh
GROUP BY sh.hobby_id) tt
ON tt.hobby_id = hb.id
ORDER BY tt.countofhob DESC
LIMIT 1
18.Вывести ИД 3х хобби с максимальным риском.
SELECT DISTINCT hb.id
FROM hobby hb
WHERE hb.risk = (SELECT max(risk)
FROM hobby)
LIMIT 3
6.Найти средний балл в каждой группе, учитывая только баллы студентов, которые имеют хотя бы одно действующее хобби.
SELECT DISTINCT st.n_group, avg(st.score)::numeric(3,2)
FROM student st
INNER JOIN(SELECT DISTINCT sh.student_id
FROM student_hobby sh, hobby hb
WHERE sh.hobby_id = hb.id AND sh.date_finish IS NULL) tt
ON tt.student_id = st.id
GROUP BY st.n_group
9.Найти все действующие хобби, которыми увлекаются троечники 2-го курса.
SELECT hb.name
FROM hobby hb
INNER JOIN student_hobby sh on sh.hobby_id = hb.id AND sh.date_finish IS NULL
INNER JOIN student st on st.id = sh.student_id
WHERE SUBSTRING(st.n_group::varchar, 1,1) = '2' AND st.score >= 3 AND st.score < 4
14.Создать представление, в котором отображается вся информация о студентах, которые продолжают заниматься хобби в данный момент и занимаются им как минимум 5 лет.
CREATE OR REPLACE VIEW Student_5yearhobby AS
SELECT st.*
FROM student st, student_hobby sh
WHERE st.id = sh.student_id AND sh.date_finish IS NULL AND (to_char('2025-05-10'::date, 'YYYY')::int * 12 * 30 + to_char('2025-05-10'::date, 'MM')::int * 30 + to_char('2025-05-10'::date, 'DD')::int - to_char(sh.date_start, 'YYYY')::int * 12 * 30 + to_char(sh.date_start, 'MM')::int * 30 + to_char(sh.date_start, 'DD')::int) / 30 / 12 >= 5
20.Вывести номера групп (без повторений), в которых учатся студенты из предыдущего запроса.
SELECT DISTINCT st.n_group
FROM student st
INNER JOIN(
SELECT st.name,st.surname, st.id
FROM student st
INNER JOIN
(SELECT DISTINCT sh.student_id, extract(day from (justify_days(now() - sh.date_start))) as countofdays
FROM student_hobby sh
WHERE sh.date_finish IS NULL
ORDER BY countofdays DESC) tt
ON tt.student_id = st.id
ORDER BY countofdays DESC LIMIT 10
) tt
ON tt.id = st.id
21.Создать представление, которое выводит номер зачетки, имя и фамилию студентов, отсортированных по убыванию среднего балла.
CREATE OR REPLACE VIEW ST_score_down AS
SELECT st.id, st.name, st.surname
FROM student st
ORDER BY st.score DESC
1.Вывести всеми возможными способами имена и фамилии студентов, средний балл которых от 4 до 4.5
SELECT * FROM student st WHERE st.score BETWEEN 4.0 and 4.5
2.Познакомиться с функцией CAST. Вывести при помощи неё студентов заданного курса (использовать Like)
SELECT st.name, st.surname FROM student st WHERE CAST (st.n_group AS varchar) LIKE '%81'
4.Вывести студентов, средний балл которых больше 4 и отсортировать по баллу от большего к меньшему
SELECT * FROM student st WHERE st.score > 4 ORDER BY st.score DESC
5.Вывести id хобби и id студента которые начали заниматься хобби между двумя заданными датами (выбрать самим) и студенты должны до сих пор заниматься хобби
SELECT std.student_id, std.hobby_id FROM student_hobby std WHERE (std.date_start BETWEEN '2020-02-10' AND '2020-03-01')
AND
(std.date_finish IS NULL)
7.Вывести студентов, средний балл которых больше 4.5 и отсортировать по баллу от большего к меньшему
SELECT * FROM student st WHERE st.score >= 4.5 ORDER BY st.score DESC LIMIT 5
9.Выведите хобби и с использованием условного оператора сделайте риск словами:
>=8 - очень высокий
>=6 & <8 - высокий
>=4 & <8 - средний
>=2 & <4 - низкий
<2 - очень низкий
SELECT *,
CASE
WHEN bb.risk >= 8 THEN 'Очень высокий'
WHEN bb.risk < 8 AND bb.risk >= 6 THEN 'Высокий'
WHEN bb.risk < 6 AND bb.risk >= 4 THEN 'Средний'
WHEN bb.risk < 4 AND bb.risk >= 2 THEN 'Низкий'
ELSE 'Очень низкий'
END AS Category
FROM hobby bb

1.Выведите на экран номера групп и количество студентов, обучающихся в них
SELECT avg(score),
CASE
WHEN n_group > 1000 AND n_group < 2000 THEN '1 курс'
WHEN n_group > 2000 AND n_group < 3000 THEN '2 курс'
WHEN n_group > 3000 AND n_group < 4000 THEN '3 курс'
ELSE '4 курс'
END AS Curse
FROM student
GROUP BY Curse
3.Подсчитать количество студентов с каждой фамилией
SELECT avg(score)::numeric(3,2), SUBSTRING(n_group::varchar, 1, 1)
FROM student
GROUP BY SUBSTRING(n_group::varchar, 1, 1)
7.Для каждой группы подсчитать средний балл, вывести на экран только те номера групп и их средний балл, в которых он менее или равен 3.5. Отсортировать по от меньшего среднего балла к большему.
SELECT n_group, avg(score)
FROM student
GROUP BY n_group
HAVING avg(score) <= 3.5
8.Для каждой группы в одном запросе вывести количество студентов, максимальный балл в группе, средний балл в группе, минимальный балл в группе
SELECT n_group, count(n_group), max(score), min(score), avg(score)
FROM student
GROUP BY n_group
9.Вывести студентов, который имеют наибольший балл в заданной группе
SELECT name, surname
FROM student
WHERE score = (
SELECT max(score)
FROM student
WHERE n_group = '2251') AND n_group = '2251'
